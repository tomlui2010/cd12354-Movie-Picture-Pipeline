name: frontend-cd
on:
  push:
    branches:
      - main
    # paths:
    #   - 'setup/frontend/**'
jobs:  
  frontend-cd-lint:  
    name: frontend-cd-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: v1-npm-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: v1-npm-deps-

      - name: Install the dependencies.
        run: |
          cd starter/frontend && npm ci  

      - name: Run lint
        run: |
          cd starter/frontend
          npm run lint
        continue-on-error: false
      
      - name: Run hadolint for dockerile
        run: |
          sudo wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 && sudo chmod +x /usr/local/bin/hadolint
          /usr/local/bin/hadolint starter/frontend/Dockerfile
        continue-on-error: false

  frontend-cd-test:   
    name: frontend-cd-test
    needs: frontend-cd-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: v1-npm-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: v1-npm-deps-

      - name: Install the dependencies.
        run: |
          cd starter/frontend
          npm ci  

      - name: Run test
        run: | 
          cd starter/frontend
          npm test

  frontend-cd-build:    
    name: frontend-cd-build
    needs: frontend-cd-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: v1-npm-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: v1-npm-deps-

      - name: Install the dependencies.
        run: |
          cd starter/frontend && npm ci

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Create ECR repository
        run: |
          aws ecr create-repository \
            --repository-name frontend-app-ecr-repo \
            --image-scanning-configuration scanOnPush=true \
            --region ${{ vars.AWS_REGION }} || echo "Repository already exists"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REACT_APP_MOVIE_API_URL: 'http://localhost:5000'
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend-app-ecr-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd starter/frontend
          docker build --build-arg=$REACT_APP_MOVIE_API_URL -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG