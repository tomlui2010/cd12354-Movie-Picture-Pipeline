name: frontend-cd
on: 
  push:
    branches:
      - main
    paths:
      - 'setup/frontend/**'
  workflow_dispatch:
jobs:  
  frontend-cd-lint:  
    name: frontend-cd-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: v1-npm-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: v1-npm-deps-

      - name: Install the dependencies.
        run: |
          cd starter/frontend && npm ci  

      - name: Run lint
        run: |
          cd starter/frontend
          npm run lint
        continue-on-error: false
      
      - name: Run hadolint for dockerile
        run: |
          sudo wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 && sudo chmod +x /usr/local/bin/hadolint
          /usr/local/bin/hadolint starter/frontend/Dockerfile
        continue-on-error: false

  frontend-cd-test:   
    name: frontend-cd-test
    needs: frontend-cd-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: v1-npm-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: v1-npm-deps-

      - name: Install the dependencies.
        run: |
          cd starter/frontend
          npm ci  

      - name: Run test
        run: | 
          cd starter/frontend
          npm test

  create-infra:
    name: create-infra
    needs: frontend-cd-test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.3.9

    - name: Terraform Init
      run: cd setup/terraform && terraform init

    - name: Terraform Validate
      run: cd setup/terraform && terraform validate 

    - name: Terraform Plan
      run: cd setup/terraform && terraform plan -var "aws_default_region=${{ vars.AWS_REGION }}" -var "aws_account_id=${{ vars.AWS_ACCOUNT_ID }}" -var "github_pat=${{ vars.TOKEN_GITHUB }}"
      continue-on-error: true

    - name: Terraform Apply
      run: |
        cd setup/terraform && terraform apply -auto-approve -var "aws_default_region=${{ vars.AWS_REGION }}" -var "aws_account_id=${{ vars.AWS_ACCOUNT_ID }}" -var "github_pat=${{ vars.TOKEN_GITHUB }}"
        FRONTEND_ECR=$(terraform output -raw frontend_ecr | tr -d '\n')
        echo "frontend_ecr=$FRONTEND_ECR" >> $GITHUB_ENV


    - name: Terraform Destroy on Failure
      if: failure()
      run: terraform destroy -auto-approve -refresh=false -var "aws_default_region=${{ vars.AWS_REGION }}" -var "aws_account_id=${{ vars.AWS_ACCOUNT_ID }}" -var "github_pat=${{ vars.TOKEN_GITHUB }}"
      working-directory: ./setup/terraform

    - name: Upload Terraform State
      if: success()
      uses: actions/upload-artifact@v3
      with:
        name: terraform-state
        path: setup/terraform/terraform.tfstate

  wait_for_eks:
    runs-on: ubuntu-latest
    needs: create-infra
    steps:
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Check EKS Cluster Status
        run: |
          aws eks describe-cluster --name ${{vars.CLUSTER_NAME}} --region ${{vars.AWS_REGION}} | jq -e '.cluster.status == "ACTIVE"' > /dev/null
        continue-on-error: false

  frontend-cd-build:    
    name: frontend-cd-build
    needs: 
    - wait_for_eks
    - backend-cd-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: v1-npm-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: v1-npm-deps-

      - name: Install the dependencies.
        run: |
          cd starter/frontend && npm ci

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Trigger CodeBuild
        env:
          PROJECT_NAME: udacity
        run: |
          aws codebuild start-build --project-name $PROJECT_NAME --environment-variables-override name=AWS_DEFAULT_REGION,value=${{vars.AWS_REGION}} name=AWS_ACCOUNT_ID,value=${{vars.AWS_ACCOUNT_ID}}

  frontend-cd-deploy:
    name: frontend-cd-deploy
    runs-on: ubuntu-latest
    needs: 
      - create-infra
      - frontend-cd-build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v1.29.0

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Generate Kubeconfig
        run: |
          CLUSTER_NAME=$(aws eks list-clusters --region ${{ vars.AWS_REGION }} --query "clusters[0]" --output text)
          echo "Cluster Name: $CLUSTER_NAME"
          aws eks update-kubeconfig --region ${{ vars.AWS_REGION }} --name $CLUSTER_NAME

      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v2

      - name: Deploy frontend App
        run: |
          cd starter/frontend/k8s
          kustomize edit set image frontend=${{ env.frontend_ecr }}:${{ github.sha }}
          kustomize build | kubectl apply -f 
