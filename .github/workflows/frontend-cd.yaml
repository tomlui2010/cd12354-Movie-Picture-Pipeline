name: Frontend Continuous Deployment
on:
  push:
    branches:
      - main
    paths:
      - 'starter/frontend/**'
  workflow_dispatch:
  # workflow_run:
  #   workflows: ["Backend Continuous Deployment"]  # Wait until backend workflow has completes
  #   types:
  #     - completed
jobs:
  frontend-cd-lint:
    name: frontend-cd-lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: v1-npm-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: v1-npm-deps-
      - name: Install the dependencies.
        run: "cd starter/frontend && npm ci  \n"
      - name: Run lint
        run: |
          cd starter/frontend
          npm run lint
        continue-on-error: false
      - name: Run hadolint for dockerile
        run: |
          sudo wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 && sudo chmod +x /usr/local/bin/hadolint
          /usr/local/bin/hadolint starter/frontend/Dockerfile
        continue-on-error: false
  frontend-cd-test:
    name: frontend-cd-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: v1-npm-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: v1-npm-deps-
      - name: Install the dependencies.
        run: "cd starter/frontend\nnpm ci  \n"
      - name: Run test
        run: |
          cd starter/frontend
          npm test
  frontend-cd-build:
    name: frontend-cd-build
    needs:
      - frontend-cd-test
      - frontend-cd-lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: v1-npm-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: v1-npm-deps-
      - name: Install the dependencies.
        run: |
          cd starter/frontend && npm ci
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      # - name: Read externalip from S3 bucket
      #   run: |
      #     aws s3 cp s3://${{ vars.AWS_ACCOUNT_ID }}/externalip.txt .
      #     EXTERNALIP=$(cat externalip.txt | grep EXTERNALIP | cut -d '=' -f2)
      #     echo "EXTERNALIP=${EXTERNALIP}" >> $GITHUB_ENV
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME: frontend
          REACT_APP_MOVIE_API_URL: ${{ secrets.REACT_APP_MOVIE_API_URL }}
        run: |
          echo Building docker image for frontend ..
          docker build --build-arg=REACT_APP_MOVIE_API_URL="http://$REACT_APP_MOVIE_API_URL" -t $REGISTRY/$IMAGE_NAME:${GITHUB_SHA::7} starter/frontend/.
          echo Pushing the frontend docker image to ECR repo
          docker push $REGISTRY/$IMAGE_NAME:${GITHUB_SHA::7}
  frontend-cd-deploy:
    name: frontend-cd-deploy
    runs-on: ubuntu-latest
    needs:
      - frontend-cd-build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v1.29.0
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Generate Kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ vars.AWS_REGION }} --name ${{ vars.CLUSTER_NAME }}
      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v2
      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Deploy frontend App
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_NAME: frontend
        run: |
          cd starter/frontend/k8s
          kustomize edit set image frontend=$REGISTRY/$IMAGE_NAME:${GITHUB_SHA::7}
          kustomize build | kubectl apply -f -
          kubectl rollout status deployment/frontend
