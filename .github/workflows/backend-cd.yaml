name: backend-cd
on:
  workflow_run:
    workflows: [create-aws-eks]
    types:
      - completed
  push:
    branches:
      - main
    # paths:
    #   - 'setup/frontend/**'
jobs:  
  backend-cd-lint:      
    name: backend-cd-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      
      - name: Cache pipenv virtualenv
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/virtualenvs
            ~/.cache/pip
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install the dependencies
        run: |
          cd starter/backend
          pipenv install --dev

      - name: Run linter
        run: |
          cd starter/backend
          pipenv run lint
        continue-on-error: false

      - name: Run hadolint for dockerile
        run: |
          sudo wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 && sudo chmod +x /usr/local/bin/hadolint
          /usr/local/bin/hadolint starter/backend/Dockerfile
        continue-on-error: false

  backend-cd-test:      
    name: backend-cd-test
    needs: backend-cd-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      
      - name: Cache pipenv virtualenv
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/virtualenvs
            ~/.cache/pip
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install the dependencies
        run: |
          cd starter/backend
          pipenv install --dev

      - name: Run tests
        run: |
          cd starter/backend
          pipenv install
          pipenv run test

  eks-setup:
    name: eks-setup
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.3.5

    - name: Terraform Init
      run: cd setup/terraform && terraform init

    - name: Terraform Validate
      run: cd setup/terraform && terraform validate 

    - name: Terraform Plan
      run: cd setup/terraform && terraform plan 
      continue-on-error: true

    - name: Terraform Apply
      run: cd setup/terraform && terraform apply -auto-approve

    - name: Upload Terraform State
      uses: actions/upload-artifact@v3
      with:
        name: terraform-state
        path: setup/terraform/terraform.tfstate

  wait_for_eks:
    runs-on: ubuntu-latest
    needs: eks-setup
    steps:
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Check EKS Cluster Status
        run: |
          aws eks describe-cluster --name ${{vars.CLUSTER_NAME}} --region ${{vars.AWS_REGION}} | jq -e '.cluster.status == "ACTIVE"' > /dev/null
        continue-on-error: false

  backend-cd-build:      
    name: backend-cd-build
    needs: wait_for_eks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      
      - name: Cache pipenv virtualenv
        uses: actions/cache@v4
        with:
          path: |
            ~/.local/share/virtualenvs
            ~/.cache/pip
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install the dependencies
        run: |
          cd starter/backend
          pipenv install --dev  
            
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Create ECR repository
        run: |
          aws ecr create-repository \
            --repository-name backend-app-ecr-repo \
            --image-scanning-configuration scanOnPush=true \
            --region ${{ vars.AWS_REGION }} || echo "Repository already exists"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend-app-ecr-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd starter/backend
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        



    
    