name: backend-cd
on:
  push:
    branches:
      - main
    # paths:
    #   - 'setup/frontend/**'
jobs:  
  backend-cd-lint:      
    name: backend-cd-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      
      - name: Cache pipenv virtualenv
        uses: actions/cache@v3
        with:
          path: |
            ~/.local/share/virtualenvs
            ~/.cache/pip
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install the dependencies
        run: |
          cd starter/backend
          pipenv install --dev

      - name: Run linter
        run: |
          cd starter/backend
          pipenv run lint
        continue-on-error: false

      - name: Run hadolint for dockerile
        run: |
          sudo wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 && sudo chmod +x /usr/local/bin/hadolint
          /usr/local/bin/hadolint starter/backend/Dockerfile
        continue-on-error: false

  backend-cd-test:      
    name: backend-cd-test
    needs: backend-cd-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      
      - name: Cache pipenv virtualenv
        uses: actions/cache@v3
        with:
          path: |
            ~/.local/share/virtualenvs
            ~/.cache/pip
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install the dependencies
        run: |
          cd starter/backend
          pipenv install --dev

      - name: Run tests
        run: |
          cd starter/backend
          pipenv install
          pipenv run test

  backend-cd-build:      
    name: backend-cd-build
    needs: backend-cd-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      
      - name: Cache pipenv virtualenv
        uses: actions/cache@v3
        with:
          path: |
            ~/.local/share/virtualenvs
            ~/.cache/pip
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install the dependencies
        run: |
          cd starter/backend
          pipenv install --dev  
            
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Create ECR repository
        run: |
          aws ecr create-repository \
            --repository-name backend-app-ecr-repo \
            --image-scanning-configuration scanOnPush=true \
            --region ${{ vars.AWS_REGION }} || echo "Repository already exists"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend-app-ecr-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        



    
    